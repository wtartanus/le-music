{
  "_args": [
    [
      "git+https://github.com/RiptideCloud/s3fs.git",
      "/Users/user/Desktop/cx3-4/week12/le_music/frontend"
    ]
  ],
  "_from": "git+https://github.com/RiptideCloud/s3fs.git",
  "_id": "s3fs@2.4.7",
  "_inCache": true,
  "_installable": true,
  "_location": "/s3fs",
  "_phantomChildren": {
    "jmespath": "0.15.0",
    "sax": "1.1.5",
    "xml2js": "0.4.15",
    "xmlbuilder": "2.6.2"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/RiptideCloud/s3fs/master/package.json",
      "gitUrl": "git://github.com/RiptideCloud/s3fs.git",
      "httpsUrl": "git+https://github.com/RiptideCloud/s3fs.git",
      "shortcut": "github:RiptideCloud/s3fs",
      "ssh": "git@github.com:RiptideCloud/s3fs.git",
      "sshUrl": "git+ssh://git@github.com/RiptideCloud/s3fs.git",
      "type": "github"
    },
    "name": null,
    "raw": "git+https://github.com/RiptideCloud/s3fs.git",
    "rawSpec": "git+https://github.com/RiptideCloud/s3fs.git",
    "scope": null,
    "spec": "git+https://github.com/RiptideCloud/s3fs.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/RiptideCloud/s3fs.git#914e5d29ecbd57338ed9f71b7be2f66628479205",
  "_shasum": "abdf7e0fbc19190a79fc29650bed56a73a603876",
  "_shrinkwrap": {
    "dependencies": {
      "aws-sdk": {
        "from": "aws-sdk@>=2.3.11 <2.4.0",
        "resolved": "https://registry.npmjs.org/aws-sdk/-/aws-sdk-2.3.11.tgz",
        "version": "2.3.11"
      },
      "bluebird": {
        "from": "bluebird@>=3.3.5 <3.4.0",
        "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.3.5.tgz",
        "version": "3.3.5"
      },
      "extend": {
        "from": "extend@>=3.0.0 <4.0.0",
        "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.0.tgz",
        "version": "3.0.0"
      },
      "jmespath": {
        "from": "jmespath@0.15.0",
        "resolved": "https://registry.npmjs.org/jmespath/-/jmespath-0.15.0.tgz",
        "version": "0.15.0"
      },
      "lodash": {
        "from": "lodash@>=3.5.0 <3.6.0",
        "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.5.0.tgz",
        "version": "3.5.0"
      },
      "sax": {
        "from": "sax@1.1.5",
        "resolved": "https://registry.npmjs.org/sax/-/sax-1.1.5.tgz",
        "version": "1.1.5"
      },
      "xml2js": {
        "from": "xml2js@0.4.15",
        "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.15.tgz",
        "version": "0.4.15"
      },
      "xmlbuilder": {
        "from": "xmlbuilder@2.6.2",
        "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-2.6.2.tgz",
        "version": "2.6.2"
      }
    },
    "name": "s3fs",
    "version": "2.4.7"
  },
  "_spec": "git+https://github.com/RiptideCloud/s3fs.git",
  "_where": "/Users/user/Desktop/cx3-4/week12/le_music/frontend",
  "author": {
    "email": "davidtpate@gmail.com",
    "name": "David Pate",
    "url": "https://github.com/DavidTPate"
  },
  "bugs": {
    "url": "http://github.com/RiptideElements/s3fs/issues"
  },
  "contributors": [
    {
      "email": "Jhorlin@gmail.com",
      "name": "Jhorlin De Armas",
      "url": "https://github.com/Jhorlin"
    }
  ],
  "dependencies": {
    "aws-sdk": "~2.4.5",
    "bluebird": "~3.4.1",
    "extend": "~3.x"
  },
  "description": "Implementation of Node.JS FS interface using Amazon Simple Storage Service (S3).",
  "devDependencies": {
    "buddy.js": "~0.x",
    "chai": "~3.x",
    "chai-as-promised": "~5.3.0",
    "dirty-chai": "~1.2.2",
    "eslint": "~3.0.1",
    "istanbul": "~0.4.4",
    "jscs": "~3.0.6",
    "jsinspect": "~0.x",
    "mocha": "~2.5.3",
    "nsp": "~2.5.0",
    "through2": "~2.x"
  },
  "gitHead": "914e5d29ecbd57338ed9f71b7be2f66628479205",
  "homepage": "http://github.com/RiptideElements/s3fs",
  "keywords": [
    "s3fs",
    "amazon s3",
    "aws s3",
    "fs",
    "file system",
    "simple storage service",
    "amazon"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "s3fs",
  "optionalDependencies": {},
  "readme": "# S3FS\n[![npm](https://img.shields.io/npm/v/s3fs.svg)](https://www.npmjs.com/package/s3fs)\n[![npm](https://img.shields.io/npm/dm/s3fs.svg)](https://www.npmjs.com/package/s3fs)\n[![Build Status](https://travis-ci.org/RiptideElements/s3fs.svg?branch=master)](https://travis-ci.org/RiptideElements/s3fs)\n[![Coverage Status](https://img.shields.io/coveralls/RiptideElements/s3fs.svg)](https://coveralls.io/r/RiptideElements/s3fs)\n[![Codacy](https://img.shields.io/codacy/13e0385fd6fc4929a2d1a974c7d0d67f.svg)](https://www.codacy.com/public/davidtpate/s3fs)\n[![Code Climate](https://codeclimate.com/github/RiptideElements/s3fs/badges/gpa.svg)](https://codeclimate.com/github/RiptideElements/s3fs)\n[![David](https://img.shields.io/david/RiptideElements/s3fs.svg)](https://david-dm.org/RiptideElements/s3fs)\n[![David](https://img.shields.io/david/dev/RiptideElements/s3fs.svg)](https://david-dm.org/RiptideElements/s3fs)\n[![David](https://img.shields.io/david/peer/RiptideElements/s3fs.svg)](https://david-dm.org/RiptideElements/s3fs)\n\nImplementation of Node.JS [FS interface](http://nodejs.org/api/fs.html) using [Amazon Simple Storage Service (S3)](http://aws.amazon.com/s3/) for storage.\n\n**Lead Maintainer**: [David Pate](https://github.com/DavidTPate)\n\n## Purpose\nS3FS provides a drop-in replacement for the File System (FS) implementation that is available with Node.JS allowing a distributed file-system to be used\nby Node.JS applications through the well-known [FS interface](http://nodejs.org/api/fs.html) used by Node.JS.\n\n## Minimum IAM Policy\nBelow is a policy for AWS [Identity and Access Management](http://aws.amazon.com/iam/) which provides the minimum privileges needed to use S3FS.\n\n```json\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::your-bucket\"\n      ]\n    },\n    {\n      \"Action\": [\n        \"s3:AbortMultipartUpload\",\n        \"s3:CreateBucket\",\n        \"s3:DeleteBucket\",\n        \"s3:DeleteBucketPolicy\",\n        \"s3:DeleteObject\",\n        \"s3:GetBucketPolicy\",\n        \"s3:GetLifecycleConfiguration\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:PutBucketPolicy\",\n        \"s3:PutLifecycleConfiguration\",\n        \"s3:PutObject\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::your-bucket/*\"\n      ]\n    }\n  ]\n}\n```\n\n## Currently Supported Methods\nThe methods below from Node.JS's [FS interface](http://nodejs.org/api/fs.html) are the only currently supported methods\nmatching the signature and functionality of the `fs` module. All of the methods support either usage through callbacks\nor promises. There isn't any support for synchronous actions currently as there isn't a need.\n\n* [fs.createReadStream(path, [options])](http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options)\n* [fs.createWriteStream(path, [options])](http://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options)\n* [fs.exists(path, callback)](http://nodejs.org/api/fs.html#fs_fs_exists_path_callback)\n* [fs.stat(path, callback)](http://nodejs.org/api/fs.html#fs_fs_stat_path_callback)\n* [fs.lstat(path, callback)](http://nodejs.org/api/fs.html#fs_fs_lstat_path_callback)\n* [fs.mkdir(path, [mode], callback)](http://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback)\n* [fs.readdir(path, callback)](http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback)\n* [fs.readFile(filename, [options], callback)](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback)\n* [fs.rmdir(path, callback)](http://nodejs.org/api/fs.html#fs_fs_rmdir_path_callback)\n* [fs.unlink(path, callback)](http://nodejs.org/api/fs.html#fs_fs_unlink_path_callback)\n* [fs.writeFile(filename, data, [options], callback)](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback)\n\n### Constructor Details\nCreating an instance of `S3fs` takes in the `bucketPath` and `options` which are passed on to the [S3 constructor](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property).\n\n```js\nvar bucketPath = 'mySuperCoolBucket';\nvar s3Options = {\n  region: 'us-east-1',\n  \n};\nvar fsImpl = new S3FS(bucketPath, s3Options);\n```\n\n### Example Callback Usage\n```js\nvar S3FS = require('s3fs');\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.writeFile('message.txt', 'Hello Node', function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n```\n\n### Example Promise Usage\n```js\nvar S3FS = require('s3fs');\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.writeFile('message.txt', 'Hello Node').then(function() {\n  console.log('It\\'s saved!');\n}, function(reason) {\n  throw reason;\n});\n```\n\n## Custom Supported Methods\nBesides the methods from Node.JS's [FS interface](http://nodejs.org/api/fs.html) we also support some custom expansions\nto the interface providing various methods such as recursive methods and S3 specific methods. They are described below.\n\n### s3fs.getPath(path)\nProvides a location by concatenating the bucket with path(s).\n\n* path `String`. _Optional_. The relative path to the working directory or file\n\n```js\n // Create an instance of S3FS which has a current working directory of `test-folder` within the S3 bucket `test-bucket`\n var fsImpl = new S3FS('test-bucket/test-folder', options);\n \n // Returns location to directory `test-bucket/test-folder/styles\n var fsImplStyles = fsImpl.getPath('styles');\n // Returns location to file `test-bucket/test-folder/styles/main.css\n var fsImplStyles = fsImpl.getPath('styles/main.css');\n // Returns location to file `test-bucket/test-folder\n var fsImplStyles = fsImpl.getPath();\n```\n\n### s3fs.clone(path)\nProvides a clone of the instance of S3FS which has relative access to the specified directory.\n\n* path `String`. _Optional_. The relative path to extend the current working directory\n\n```js\n// Create an instance of S3FS which has a current working directory of `test-folder` within the S3 bucket `test-bucket`\nvar fsImpl = new S3FS('test-bucket/test-folder', options);\n// Creates a copy (which uses the same instance of S3FS) which has a current working directory of `test-folder/styles`\nvar fsImplStyles = fsImpl.clone('styles');\n```\n\n### s3fs.copyFile(sourcePath, destinationPath[, callback])\nAllows a file to be copied from one path to another path within the same bucket. Paths are relative to\nthe bucket originally provided.\n\n* sourceFile `String`. **Required**. Relative path to the source file\n* destinationFile `String`. **Required**. Relative path to the destination file\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.copyFile('test-folder/test-file.txt', 'other-folder/test-file.txt').then(function(data) {\n  // File was successfully copied\n  // Data contains details such as the `ETag` about the object. See [AWS SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#copyObject-property) for details.\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.copyDir(sourcePath, destinationPath[, callback])\nRecursively copies a directory from the source path to the destination path.\n\n* sourcePath `String`. **Required**. The source directory to be copied\n* destinationPath `String`. **Required**. The destination directory to be copied to\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.copyDir('test-folder', 'other-folder').then(function() {\n  // Directory was successfully copied\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.create(options[, callback])\nCreates a new bucket on S3.\n\n* options `Object`. _Optional_. The options to be used when creating the bucket. See [AWS SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property)\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.create().then(function() {\n  // Bucket was successfully created\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.delete([callback])\nDeletes a bucket on S3, can only be deleted when empty. If you need to delete one that isn't empty use\n[`destroy([callback])`](#s3fsdestroycallback) instead.\n\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.delete().then(function() {\n  // Bucket was successfully deleted\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.destroy([callback])\nRecursively deletes all files within the bucket and then deletes the bucket.\n\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.destroy().then(function() {\n  // Bucket was successfully destroyed\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.headObject(path[, callback])\nRetrieves the details about an object, but not the contents.\n\n* path `String`. **Required**. Path to the object to retrieve the head for\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.headObject('test-file.txt').then(function(details) {\n  // Details contains details such as the `ETag` about the object. See [AWS SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#headObject-property) for details.\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.listContents(path, marker[, callback])\nRetrieves a list of all objects within the specific path. The result is similar to that of [`headObject(path[, callback])`](#s3fsheadobjectpath-callback)\nexpect that it contains an array of objects.\n\n* path `String`. **Required**. The path to list all of the objects for\n* marker `String`. **Required**. The key to start with when listing objects\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.listContents('/', '/').then(function(data) {\n  // Data.Contents contains details such as the `ETag` about the object. See [AWS SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#headObject-property) for details.\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.putBucketLifecycle(name, prefix, days[, callback])\nAdds/Updates a lifecycle on a bucket.\n\n* name `String`. **Required**. The name of the lifecycle. The value cannot be longer than 255 characters.\n* prefix `String`. **Required**. Prefix identifying one or more objects to which the rule applies.\n* days Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\n// Remove the Cached contents in the `/cache` directory each day.\nfsImpl.putBucketLifecycle('expire cache', 'cache', 1).then(function() {\n  // Bucket Lifecycle was successfully added/updated\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.readdirp(path[, callback])\nRecursively reads a directory.\n\n* path `String`. **Required**. The path to the directory to read from\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.readdirp('test-folder').then(function(files) {\n  // Files contains a list of all of the files similar to [`fs.readdir(path, callback)`](http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback) but with recursive contents\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.mkdirp(path[, callback])\nRecursively creates a directory.\n\n* path The path to the directory to create\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.mkdirp('test-folder').then(function() {\n  // Directory has been recursively created\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n### s3fs.rmdirp(path[, callback])\nRecursively deletes a directory.\n\n* path The path to the directory to delete\n* callback `Function`. _Optional_. Callback to be used, if not provided will return a Promise\n\n```js\nvar fsImpl = new S3FS('test-bucket', options);\nfsImpl.rmdirp('test-folder').then(function() {\n  // Directory has been recursively deleted\n}, function(reason) {\n  // Something went wrong\n});\n```\n\n## Testing\nThis repository uses [Mocha](http://mochajs.org/) as its test runner. Tests can be run by executing the following command:\n\n```bash\nnpm test\n```\n\nThis will run all tests and report on their success/failure in the console, additionally it will include our [Code Coverage](#code-coverage).\n\n## Code Coverage\nThis repository uses [Istanbul](http://gotwarlost.github.io/istanbul/) as its code coverage tool. Code Coverage will be calculated when executing the following command:\n\n```bash\nnpm test\n```\n\nThis will report the Code Coverage to the console similar to the following:\n\n```bash\n=============================== Coverage summary ===============================\nStatements   : 78.07% ( 356/456 )\nBranches     : 50.23% ( 107/213 )\nFunctions    : 74.77% ( 83/111 )\nLines        : 78.07% ( 356/456 )\n================================================================================\n```\n\nAdditionally, an interactive HTML report will be generated in `./coverage/lcov-report/index.html` which allows browsing the coverage by file.\n\n\n## License\n[MIT](LICENSE)\n\n## Copyright\n> Copyright (c) 2015 Riptide Software Inc.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/RiptideElements/s3fs.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha -- --check-leaks --recursive --timeout=25000 test && istanbul check-coverage --statements 80.95 --branches 76.56 --functions 74.3 --lines 80.95",
    "lint": "eslint . && jscs . && jsinspect . && buddy --detect-objects index.js ./lib",
    "security": "nsp check",
    "test": "mocha --check-leaks --recursive --timeout=25000 test",
    "test-ci": "npm run lint && npm run security && npm run cover"
  },
  "version": "2.4.7"
}
